@model IEnumerable<EventViewModel>
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> _signInManager
@inject UserManager<IdentityUser> _userManager
@{
    ViewData["Title"] = "My Events";
}

@{
    var user = await _userManager.GetUserAsync(User);

    var email = user != null ? user.Email : "";
}

<div class="container mt-5">
    <!-- Page Heading -->
    <div class="row justify-content-center">
        <div class="col-md-10 text-center">
            <h1 class="display-4 mb-4">My Events</h1>
        </div>
    </div>

    <!-- Nav Tabs -->
    <div class="row">
        <div class="col-md-12">
            <ul class="nav nav-tabs justify-content-center" id="myTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="upcoming-tab" data-bs-toggle="tab" data-bs-target="#upcoming" type="button" role="tab" aria-controls="upcoming" aria-selected="true">
                        <i class="bi bi-calendar-event"></i> Upcoming Events
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="past-tab" data-bs-toggle="tab" data-bs-target="#past" type="button" role="tab" aria-controls="past" aria-selected="false">
                        <i class="bi bi-calendar-check"></i> Past Events
                    </button>
                </li>
            </ul>
        </div>
    </div>

    <!-- Tab Content -->
    <div class="tab-content" id="myTabContent">
        <!-- Upcoming Events Tab -->
        <div class="tab-pane fade show active" id="upcoming" role="tabpanel" aria-labelledby="upcoming-tab">
            <div class="row pt-4">
                @if (!Model.Any(e => e.Date > DateTime.Now && e.Organiser == User.Identity.Name))

                {
                    <div class="col text-center">
                        <p class="text-muted">No upcoming events found.</p>
                    </div>
                }

                else

                {
                    foreach (var bookEvent in Model.Where(e => e.Date > DateTime.Now && e.Organiser == User.Identity.Name))
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card shadow-sm h-100">
                                <!-- Card Header -->
                                <div class="card-header bg-success text-white">
                                    <h5 class="card-title">@bookEvent.Title</h5>
                                </div>
                                <!-- Card Body -->
                                <div class="card-body">
                                    <p class="card-text">
                                        <strong>Date:</strong> @bookEvent.Date.ToString("MMM dd, yyyy") <br>
                                        <strong>Start Time:</strong> @bookEvent.StartTime.ToString("hh:mm tt") <br>
                                        <strong>Location:</strong> @bookEvent.Location <br>
                                        <strong>Type:</strong> <span class="badge @(bookEvent.Type == "Public" ? "bg-success" : "bg-secondary")">@bookEvent.Type</span> <br>
                                        <strong>Description:</strong> @bookEvent.Description
                                    </p>
                                </div>
                                <!-- Card Footer -->
                                <div class="card-footer text-center">
                                    <a href="@Url.Action("ViewDetails", "Event", new { id = bookEvent.Id })" class="btn btn-success">View Details</a>
                                    <!-- Edit button only for upcoming events -->
                                    <a href="@Url.Action("UpdateEvent", "Event", new { id = bookEvent.Id })" class="btn btn-warning">Edit</a>
                                    <button type="button" class="btn btn-danger" onclick="confirmDelete(@bookEvent.Id)">Delete Event</button>
                                </div>
                            </div>
                        </div>
                    }

                }
            </div>
        </div>

        <!-- Past Events Tab -->
        <div class="tab-pane fade" id="past" role="tabpanel" aria-labelledby="past-tab">
            <div class="row pt-4">
                @if (!Model.Any(e => e.Date < DateTime.Now && e.Organiser == User.Identity.Name))

                {
                    <div class="col text-center">
                        <p class="text-muted">No past events found.</p>
                    </div>
                }

                else

                {
                    foreach (var bookEvent in Model.Where(e => e.Date < DateTime.Now && e.Organiser == User.Identity.Name))
                    {
                        <div class="col-md-6 col-lg-4 mb-4">
                            <div class="card shadow-sm h-100">
                                <!-- Card Header -->
                                <div class="card-header bg-primary text-white">
                                    <h5 class="card-title">@bookEvent.Title</h5>
                                </div>
                                <!-- Card Body -->
                                <div class="card-body">
                                    <p class="card-text">
                                        <strong>Date:</strong> @bookEvent.Date.ToString("MMM dd, yyyy") <br>
                                        <strong>Start Time:</strong> @bookEvent.StartTime.ToString("hh:mm tt") <br>
                                        <strong>Location:</strong> @bookEvent.Location <br>
                                        <strong>Type:</strong> <span class="badge @(bookEvent.Type == "Public" ? "bg-success" : "bg-secondary")">@bookEvent.Type</span> <br>
                                        <strong>Description:</strong> @bookEvent.Description
                                    </p>
                                </div>
                                <!-- Card Footer -->
                                <div class="card-footer text-center">
                                    <a href="@Url.Action("ViewDetails", "Event", new { id = bookEvent.Id })" class="btn btn-primary">View Details</a>
                                    <!-- Delete button can be included here if needed -->
                                    <button type="button" class="btn btn-danger" onclick="confirmDelete(@bookEvent.Id)">Delete Event</button>
                                </div>
                            </div>
                        </div>
                    }

                }
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function confirmDelete(eventId) {
        if (confirm('Are you sure you want to delete this event?')) {
            window.location.href = '/Event/DeleteEvent/' + eventId;
        }
    }
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
